const fs = require('fs');
const path = require('path');
const { PDFDocument, StandardFonts, rgb } = require('pdf-lib');

/**
 * Generate a simple PDF for a Visit report using pdf-lib.
 * Creates uploads/<visitId>/report-final.pdf and returns its absolute path.
 *
 * @param {Object} visit - Mongoose Visit document (populated with school, team)
 * @param {Object} snapshot - Plain object snapshot of report data to embed
 * @returns {Promise<string>} absolute file path written
 */
async function generateVisitReportPdf(visit, snapshot) {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595.28, 841.89]); // A4 size in points
  const { width } = page.getSize();

  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

  const margin = 50;
  let y = 792; // start near top

  // Header
  const title = 'Report for SAS';
  page.drawText(title, {
    x: margin,
    y,
    size: 24,
    font: fontBold,
    color: rgb(0.15, 0.4, 0.2)
  });
  y -= 30;

  const subtitle = `${visit.school?.name || 'School'} • ${visit.team?.name || 'Team'} • ${new Date(visit.date).toLocaleDateString('en-IN')}`;
  page.drawText(subtitle, {
    x: margin,
    y,
    size: 12,
    font,
    color: rgb(0.2, 0.2, 0.2)
  });
  y -= 20;
  // line
  page.drawLine({ start: { x: margin, y }, end: { x: width - margin, y }, color: rgb(0.8, 0.8, 0.8), thickness: 1 });
  y -= 20;

  // Helper to draw label:value blocks
  const drawField = (label, value, opts = {}) => {
    if (y < 80) {
      // naive pagination: add new page
      y = 792;
    }
    page.drawText(label, { x: margin, y, size: 11, font: fontBold, color: rgb(0.1, 0.1, 0.1) });
    y -= 14;
    const text = (value == null || value === '') ? '—' : String(value);
    const lines = wrapText(text, 90);
    lines.forEach(l => {
      page.drawText(l, { x: margin, y, size: 11, font, color: rgb(0.1, 0.1, 0.1) });
      y -= 14;
    });
    y -= (opts.spacer ?? 6);
  };

  const listToString = (arr) => Array.isArray(arr) ? arr.filter(Boolean).join(', ') : (arr || '');

  drawField('School', visit.school?.name || 'N/A');
  drawField('Team', visit.team?.name || 'N/A');
  drawField('Visit Date', new Date(visit.date).toLocaleString('en-IN'));
  drawField('Assigned Class', visit.assignedClass || 'N/A');
  drawField('Members', listToString(visit.members));
  drawField('Children Count', visit.childrenCount ?? 'N/A');
  drawField('Children Response', snapshot.childrenResponse || visit.childrenResponse || 'N/A');
  drawField('Topics Covered', listToString(snapshot.topicsCovered || visit.topicsCovered));
  drawField('Teaching Methods', listToString(snapshot.teachingMethods || visit.teachingMethods));
  drawField('Challenges Faced', snapshot.challengesFaced || visit.challengesFaced || '');
  drawField('Suggestions', snapshot.suggestions || visit.suggestions || '');

  // Footer
  y = 40;
  page.drawLine({ start: { x: margin, y }, end: { x: width - margin, y }, color: rgb(0.8, 0.8, 0.8), thickness: 1 });
  y -= 14;
  page.drawText('Generated by Spread A Smile', { x: margin, y, size: 10, font, color: rgb(0.4, 0.4, 0.4) });

  const pdfBytes = await pdfDoc.save();

  // Ensure dir uploads/<visitId>
  const outDir = path.join(__dirname, '..', 'uploads', String(visit._id));
  if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });
  const outPath = path.join(outDir, 'report-final.pdf');
  fs.writeFileSync(outPath, pdfBytes);
  return outPath;
}

function wrapText(text, maxCharsPerLine) {
  const words = String(text).split(/\s+/);
  const lines = [];
  let line = '';
  for (const w of words) {
    if ((line + (line ? ' ' : '') + w).length > maxCharsPerLine) {
      if (line) lines.push(line);
      line = w;
    } else {
      line = line ? line + ' ' + w : w;
    }
  }
  if (line) lines.push(line);
  return lines;
}

module.exports = { generateVisitReportPdf };
